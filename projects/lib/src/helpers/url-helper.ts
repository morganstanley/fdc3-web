/* Morgan Stanley makes this available to you under the Apache License,
 * Version 2.0 (the "License"). You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0.
 * See the NOTICE file distributed with this work for additional information
 * regarding copyright ownership. Unless required by applicable law or agreed
 * to in writing, software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions
 * and limitations under the License. */

import { generateUUID } from './uuid.helper';

const UUURLBase = `http://fdc3.uurl.ms.com`;

/**
 * Takes an object and returns a url that encodes all the key value pairs.
 * THe url includes a UUID to make it unique. This uuid can either be passed in or one can be generated.
 * @param params
 * @returns
 */
export function generateUUUrl<T extends Record<string, string>>(params: T, uuid?: string): string {
    uuid = uuid ?? generateUUID();
    const url = new URL(`${UUURLBase}/${uuid}`);

    for (const [key, value] of Object.entries(params)) {
        url.searchParams.append(key, value);
    }

    //TODO: encrypt this string so other apps cannot read or modify the data we encode here.
    return btoa(url.toString());
}

/**
 * Takes a string and returns the encoded data if it is a valid universally unique url generated by generateUUUrl
 * The original payload passed to generateUUUrl is returned along with the uuid that was either passed in or was generated
 * @returns
 */
export function decodeUUUrl<T extends Record<string, string>>(
    encodedUrl: string,
): { payload: Partial<T>; uuid: string } | undefined {
    const decoded = atob(encodedUrl);

    if (decoded.indexOf(UUURLBase) != 0) {
        return undefined;
    }

    const payload: Partial<T> = {};

    const url = new URL(decoded);
    url.searchParams.forEach((value, key) => ((payload as any)[key] = value));

    const uuid = url.pathname.substring(1);

    return { payload, uuid };
}
